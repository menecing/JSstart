"use strict"
//Создайте функцию, которая будет на вход принимать 1 аргумент с именем человека и возвращать строку.
//Пример: вызов функции sayHello('Антон')возвращает строку "Привет, Антон!". В решении вызывать функцию не нужно, программа сделает это за вас.
//P.S. возвращать - это использовать ключевое слово return.
//P.S.S. Это классическая функция-модификатор, которых мы дальше по курсу будем создавать еще много в разных видах.

function sayHello(name) {
    return (`Привет, ${name}`);
    }
sayHello ('Alex')

//Создайте функцию, которая принимает в себя 1 аргумент в виде целого числа и возвращает массив из трех чисел: одно на 1 меньше, сам аргумент, и число на 1 больше.
//Пример: вызов функции returnNeighboringNumbers(5)возвращает массив в виде [4, 5, 6].

function returnNeighboringNumbers(num) {
    return [num - 1, num, num + 1];
}
returnNeighboringNumbers(5);
console.log (returnNeighboringNumbers(7));

//3) Создайте функцию, которая будет принимать в себя 2 аргумента, оба числа. 
//Первое число - это база, второе число - это сколько раз нужно будет повторить это число в прогрессии. 
//(Смотри пример ниже). Функция должна возвращать строку (или число в особых случаях, о которых ниже),
// где эти числа идут по порядку, разделенные тремя дефисами "---". После последнего числа их 
//не должно быть.
//Если второй аргумент не является числом, равен или меньше нуля - то возвращать 
//просто первый аргумент. (Проверяем через оператор typeof)

function getMathResult(num, times) {
    if (typeof(times) !=='number' || times <=0) {
        return num;
    }

    let str = '';
    for (let i = 1; i <= times; i++) {
        if (i === times) {
            str += `${num * i}`;
            // Тут без черточек в конце
        } else {
            str += `${num * i}---`;
            // Это тоже самое, что и
            // str = str + num * i + "---"
        }
    }

    return str;
}

console.log (getMathResult(5,5));

